package org.eclipse.regexp.ui.view;

import org.eclipse.core.databinding.observable.value.IObservableValue;
import org.eclipse.core.databinding.observable.value.IValueChangeListener;
import org.eclipse.core.databinding.observable.value.ValueChangeEvent;
import org.eclipse.jface.databinding.swt.WidgetProperties;
import org.eclipse.jface.layout.GridDataFactory;
import org.eclipse.jface.layout.GridLayoutFactory;
import org.eclipse.regexp.RegexpEngine;
import org.eclipse.regexp.ui.RegexpUIPlugin;
import org.eclipse.regexp.ui.common.ControlUtils;
import org.eclipse.regexp.ui.view.input.InputSection;
import org.eclipse.regexp.ui.view.results.ResultsSection;
import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Text;
import org.eclipse.ui.forms.ManagedForm;
import org.eclipse.ui.forms.widgets.FormToolkit;
import org.eclipse.ui.part.ViewPart;

public class RegularExpressionsView extends ViewPart {

	private final RegexpEngine engine = new RegexpEngine();

	private Text regExp;
	private Text replacement;

	private InputSection input;
	private ResultsSection results;

	private IObservableValue regexpObservable;

	@Override
	public void createPartControl(final Composite composite) {
		final ManagedForm form = new ManagedForm(composite);
		form.getForm().setText("Regular Expression Test View");

		final FormToolkit toolkit = form.getToolkit();
		toolkit.setBorderStyle(SWT.BORDER);
		toolkit.decorateFormHeading(form.getForm().getForm());
		toolkit.setBorderStyle(SWT.BORDER);

		form.getForm().getToolBarManager().add(new OpenSettings());
		form.getForm().getToolBarManager().update(true);
		toolkit.decorateFormHeading(form.getForm().getForm());

		final Composite formPanel = form.getForm().getBody();
		GridLayoutFactory.swtDefaults().numColumns(2).applyTo(formPanel);

		// general
		toolkit.createLabel(formPanel, "Regular Expression:");
		regExp = toolkit.createText(formPanel, "");
		GridDataFactory.swtDefaults().align(SWT.FILL, SWT.CENTER)
				.grab(true, false).applyTo(regExp);
		regexpObservable = ControlUtils.observeText(regExp);
		regexpObservable.addValueChangeListener(new IValueChangeListener() {
			@Override
			public void handleValueChange(final ValueChangeEvent event) {
				doTest();
			}
		});
		toolkit.createLabel(formPanel, "Replacement:");
		replacement = toolkit.createText(formPanel, "");
		GridDataFactory.swtDefaults().align(SWT.FILL, SWT.CENTER)
				.grab(true, false).applyTo(replacement);

		// input section
		input = new InputSection();
		input.create(formPanel, toolkit);

		// results
		results = new ResultsSection();
		results.create(formPanel, toolkit);

		/*
		 * // buttons bar final Composite buttonsBar =
		 * toolkit.createComposite(formPanel);
		 * GridDataFactory.swtDefaults().align(SWT.BEGINNING, SWT.CENTER)
		 * .applyTo(buttonsBar);
		 * GridLayoutFactory.fillDefaults().numColumns(2).applyTo(buttonsBar);
		 * 
		 * Button testBtn = toolkit.createButton(buttonsBar, "Test", SWT.PUSH);
		 * testBtn.setFont(JFaceResources.getHeaderFont());
		 * testBtn.addSelectionListener(new SelectionAdapter() {
		 * 
		 * @Override public void widgetSelected(final SelectionEvent e) {
		 * doTest(); } });
		 */
	}

	@Override
	public void dispose() {
		super.dispose();

		if (regexpObservable != null && !regexpObservable.isDisposed()) {
			regexpObservable.dispose();
		}
	}

	public void doTest() {
		results.setInput(engine.test(regExp.getText(), replacement.getText(),
				input.getInputs(), RegexpUIPlugin.getDefault().getFlags()));
	}

	@Override
	public void setFocus() {
		regExp.setFocus();
	}
}
